// Vitest Snapshot v1

exports[`octetString > with constrained variable length > should refuse to parse a buffer with four bytes 1`] = `
{
  "error": [ParseError: Expected octet string of length at least 5, but got 4

    04 dd 8d 71 71  
    ^^],
  "success": false,
}
`;

exports[`octetString > with constrained variable length > should refuse to parse a buffer with nine bytes 1`] = `
{
  "error": [ParseError: Expected octet string of length at most 8, but got 9

    09 dd 8d 71 71 bd c6 b1 66 38  
    ^^],
  "success": false,
}
`;

exports[`octetString > with constrained variable length > should refuse to serialize a buffer with four bytes 1`] = `
{
  "error": [SerializeError: Expected octet string of length at least 5, but got 4],
  "success": false,
}
`;

exports[`octetString > with constrained variable length > should refuse to serialize a buffer with nine bytes 1`] = `
{
  "error": [SerializeError: Expected octet string of length at most 8, but got 9],
  "success": false,
}
`;

exports[`octetString > with fixed length > should refuse to serialize a value of the wrong length 1`] = `
{
  "error": [SerializeError: Expected octet string of length 22, but got 21],
  "success": false,
}
`;

exports[`octetString > with variable length > should reject a non-canonical length prefix which could fit one byte when allowNoncanonical is false > error 1`] = `
{
  "error": [ParseError: non-canonical encoding - length prefix is not minimal (length <= 0x7f but not encoded as a single byte)

    81 01 12  
    ^^],
  "success": false,
}
`;

exports[`octetString > with variable length > should reject a non-canonical length prefix which could fit two bytes when allowNoncanonical is false > error 1`] = `
{
  "error": [ParseError: non-canonical encoding - length prefix is not minimal (could be encoded in fewer bytes)

    82 00 80 71 bd c6 b1 66 38 03 f5 3a 2e 1d db 37 00 4b 2f fe â€¦
    ^^],
  "success": false,
}
`;

exports[`octetString > with variable length > should reject a non-canonical length prefix which could fit two bytes when allowNoncanonical is true 1`] = `
{
  "length": 131,
  "success": true,
  "value": Uint8Array [
    113,
    189,
    198,
    177,
    102,
    56,
    3,
    245,
    58,
    46,
    29,
    219,
    55,
    0,
    75,
    47,
    254,
    176,
    89,
    191,
    152,
    111,
    13,
    5,
    113,
    126,
    140,
    15,
    215,
    210,
    250,
    176,
    8,
    175,
    109,
    10,
    170,
    29,
    202,
    162,
    247,
    125,
    8,
    48,
    216,
    209,
    143,
    109,
    138,
    161,
    102,
    164,
    152,
    32,
    38,
    171,
    175,
    50,
    167,
    149,
    137,
    158,
    66,
    60,
    237,
    138,
    9,
    47,
    51,
    129,
    11,
    79,
    22,
    118,
    75,
    114,
    31,
    125,
    205,
    83,
    33,
    184,
    237,
    231,
    141,
    0,
    230,
    28,
    210,
    90,
    132,
    31,
    74,
    64,
    76,
    117,
    117,
    156,
    73,
    144,
    177,
    162,
    43,
    143,
    243,
    83,
    39,
    125,
    17,
    219,
    156,
    161,
    173,
    128,
    68,
    6,
    89,
    240,
    138,
    1,
    219,
    167,
    146,
    201,
    9,
    0,
    0,
    0,
  ],
}
`;

exports[`octetString > with variable length > should serialize a buffer with 128 bytes 1`] = `
{
  "success": true,
  "value": Uint8Array [
    129,
    128,
    221,
    141,
    113,
    113,
    189,
    198,
    177,
    102,
    56,
    3,
    245,
    58,
    46,
    29,
    219,
    55,
    0,
    75,
    47,
    254,
    176,
    89,
    191,
    152,
    111,
    13,
    5,
    113,
    126,
    140,
    15,
    215,
    210,
    250,
    176,
    8,
    175,
    109,
    10,
    170,
    29,
    202,
    162,
    247,
    125,
    8,
    48,
    216,
    209,
    143,
    109,
    138,
    161,
    102,
    164,
    152,
    32,
    38,
    171,
    175,
    50,
    167,
    149,
    137,
    158,
    66,
    60,
    237,
    138,
    9,
    47,
    51,
    129,
    11,
    79,
    22,
    118,
    75,
    114,
    31,
    125,
    205,
    83,
    33,
    184,
    237,
    231,
    141,
    0,
    230,
    28,
    210,
    90,
    132,
    31,
    74,
    64,
    76,
    117,
    117,
    156,
    73,
    144,
    177,
    162,
    43,
    143,
    243,
    83,
    39,
    125,
    17,
    219,
    156,
    161,
    173,
    128,
    68,
    6,
    89,
    240,
    138,
    1,
    219,
    167,
    146,
    201,
    9,
  ],
}
`;
